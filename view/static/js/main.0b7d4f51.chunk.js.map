{"version":3,"sources":["Components/Forms/FormAddEdit.js","Components/Modals/Modal.js","Components/Tables/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","state","id","name","email","phone","dob","gender","address","errors","status","message","validDate","current","isBefore","Datetime","moment","onChange","e","_this","setState","Object","defineProperty","target","value","submitFormAdd","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","responseJson","handleApiErrors","error","success","data","props","addItemToState","toggle","Toastr","catch","err","submitFormEdit","updateState","stateErrors","forEach","this","item","_this$props$item","_this2","react_default","a","createElement","Form","onSubmit","FormGroup","Label","for","Input","type","invalid","FormFeedback","placeholder","DateTime_default","datetime","format","Moment","renderInput","openCalendar","closeCalendar","assign","timeFormat","dateFormat","max","Date","isValidDate","Button","React","Component","ModalForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","FormAddEdit","DataTable","deleteItem","window","confirm","responseBody","deleteItemFromState","items","map","key","scope","width","Modals_Modal","Table","responsive","hover","App","concat","toConsumableArray","itemIndex","findIndex","newArray","slice","updatedItems","filter","getItems","Container","Row","Col","margin","Tables_DataTable","react_csv","filename","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b7d4f51.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormFeedback } from 'reactstrap';\nimport Toastr from \"toastr\";\nimport Moment from \"moment\";\nimport Datetime from 'react-datetime';\n\nclass AddEditForm extends React.Component {\n  state = {\n    id: 0,\n    name: '',\n    email: '',\n    phone: '',\n    dob: '',\n    gender: '',\n    address: '',\n\n    // hold the backend validation errors\n    errors: {\n      name: {\n        status: false,\n        message: ''\n      },\n      email: {\n        status: false,\n        message: ''\n      },\n      phone: {\n        status: false,\n        message: ''\n      },\n      dob: {\n        status: false,\n        message: ''\n      },\n      gender: {\n        status: false,\n        message: ''\n      },\n      address: {\n        status: false,\n        message: ''\n      }\n    }\n  }\n\n  validDate = function( current ){\n    return current.isBefore( Datetime.moment() );\n  };\n\n  onChange = e => {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  // parsing api errors to our logic\n  handleApiErrors(errors){\n    let stateErrors = {\n      name: {\n        status: false,\n        message: ''\n      },\n      email: {\n        status: false,\n        message: ''\n      },\n      phone: {\n        status: false,\n        message: ''\n      },\n      dob: {\n        status: false,\n        message: ''\n      },\n      gender: {\n        status: false,\n        message: ''\n      },\n      address: {\n        status: false,\n        message: ''\n      }\n    }\n  \n    errors.forEach(error => {\n      switch (error.id) {\n        case \"name\":\n          stateErrors.name.status = true\n          stateErrors.name.message = error.message\n          break;\n        case \"email\":\n          stateErrors.email.status = true\n          stateErrors.email.message = error.message\n          break;\n        case \"phone\":\n          stateErrors.phone.status = true\n          stateErrors.phone.message = error.message\n          break;\n        case \"dob\":\n          stateErrors.dob.status = true\n          stateErrors.dob.message = error.message\n          break;\n        case \"gender\":\n          stateErrors.gender.status = true\n          stateErrors.gender.message = error.message\n          break;\n        case \"address\":\n          stateErrors.address.status = true\n          stateErrors.address.message = error.message\n          break;\n        default:\n          // default\n          break;\n      }\n    });\n\n    this.setState({errors:stateErrors})\n  }\n  \n  submitFormAdd = e => {\n    e.preventDefault()\n    fetch('/api/v1/users', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: this.state.name,\n        email: this.state.email,\n        phone: this.state.phone,\n        dob: this.state.dob,\n        gender: this.state.gender,\n        address: this.state.address\n      })\n    })\n      .then(response => {\n        if(response.status === 422){\n          response.json().then(responseJson => {\n            this.handleApiErrors(responseJson.error)\n          });\n        } else {\n          response.json().then(responseJson => {\n            if (responseJson.success) {\n              if(responseJson.data){\n                this.props.addItemToState(responseJson.data)\n              }\n\n              this.props.toggle()\n              Toastr.success(responseJson.message, 'Success')\n            } else {\n              Toastr.error(responseJson.message, 'Error')\n            }\n          })\n        }\n      })\n      .catch(err => {\n        Toastr.error(\"Can't connect to server\", 'Error')\n      })\n  }\n\n  submitFormEdit = e => {\n    e.preventDefault()\n    fetch('/api/v1/users/' + this.state.id, {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id: this.state.id,\n        name: this.state.name,\n        email: this.state.email,\n        phone: this.state.phone,\n        dob: this.state.dob,\n        gender: this.state.gender,\n        address: this.state.address\n      })\n    })\n      .then(response => {\n        if(response.status === 422){\n          response.json().then(responseJson => {\n            this.handleApiErrors(responseJson.error)\n          });\n        } else {\n          response.json().then(responseJson => {\n            if (responseJson.success) {\n              if (responseJson.data) {\n                this.props.updateState(responseJson.data)\n                this.props.toggle()\n                Toastr.success(responseJson.message, 'Success')\n              }\n            } else {\n              Toastr.error(responseJson.message, 'Error')\n            }\n          })\n        }\n      })\n      .catch(err => {\n        Toastr.error(\"Can't connect to server\", 'Error')\n      })\n  }\n\n  componentDidMount(){\n    // if item exists, populate the state with proper data\n    if(this.props.item){\n      const { id, name, email, phone, dob, gender, address } = this.props.item\n      this.setState({ id, name, email, phone, dob, gender, address })\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}>\n        <FormGroup>\n          <Label for=\"name\">Name</Label>\n          <Input type=\"text\" name=\"name\" id=\"name\" onChange={this.onChange} value={this.state.name === null ? '' : this.state.name} invalid={this.state.errors.name.status} />\n          <FormFeedback>{this.state.errors.name.message}</FormFeedback>\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"email\">Email</Label>\n          <Input type=\"text\" name=\"email\" id=\"email\" onChange={this.onChange} value={this.state.email === null ? '' : this.state.email}  invalid={this.state.errors.email.status} />\n          <FormFeedback>{this.state.errors.email.message}</FormFeedback>\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"phone\">Phone</Label>\n          <Input type=\"phone\" name=\"phone\" id=\"phone\" onChange={this.onChange} value={this.state.phone === null ? '' : this.state.phone}  placeholder=\"ex. 081122225555\" invalid={this.state.errors.phone.status} />\n          <FormFeedback>{this.state.errors.phone.message}</FormFeedback>\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"dob\">Date Of Birth</Label>\n          <Datetime \n            onChange={datetime => {\n              this.setState({dob: datetime.format(\"YYYY-MM-DD\")})\n            }}\n            value={this.state.dob ? Moment(this.state.dob).format(\"YYYY-MM-DD\") : ''}\n            renderInput={(props, openCalendar, closeCalendar) => {\n              return (\n                <div>\n                  <Input \n                    //value={this.state.dob === null ? '' : this.state.dob} \n                    invalid={this.state.errors.dob.status} \n                    {...props}\n                    />\n                  <FormFeedback>{this.state.errors.dob.message}</FormFeedback>\n                </div>\n              );\n            }}\n            timeFormat={false}\n            dateFormat={\"YYYY-MM-DD\"}\n            max={new Date()}\n            isValidDate={ this.validDate }\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"gender\">Gender</Label>\n          <Input type=\"select\" name=\"gender\" id=\"gender\" onChange={this.onChange} value={this.state.gender === null ? '' : this.state.gender} invalid={this.state.errors.gender.status} >\n          <option value=\"\">Please choose ...</option>\n            <option value=\"m\">Male</option>\n            <option value=\"f\">Female</option>\n          </Input>\n          <FormFeedback>{this.state.errors.gender.message}</FormFeedback>\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"address\">Address</Label>\n          <Input type=\"textarea\" name=\"address\" id=\"address\" onChange={this.onChange} value={this.state.address}  invalid={this.state.errors.address.status} />\n          <FormFeedback>{this.state.errors.address.message}</FormFeedback>\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default AddEditForm","import React, { Component } from 'react'\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport AddEditForm from '../Forms/FormAddEdit'\n\nclass ModalForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }))\n  }\n\n  render() {\n      const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>\n\n      const label = this.props.buttonLabel\n\n      let button = ''\n      let title = ''\n\n      if(label === 'Edit'){\n        button = <Button\n                  color=\"warning\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Edit Item'\n      } else {\n        button = <Button\n                  color=\"success\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Add New Item'\n      }\n\n      return (\n      <div>\n        {button}\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle} close={closeBtn}>{title}</ModalHeader>\n          <ModalBody>\n            <AddEditForm\n              addItemToState={this.props.addItemToState}\n              updateState={this.props.updateState}\n              toggle={this.toggle}\n              item={this.props.item} />\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ModalForm","import React, { Component } from 'react'\nimport { Table, Button } from 'reactstrap';\nimport ModalForm from '../Modals/Modal'\nimport Toastr from \"toastr\";\nimport Moment from \"moment\";\n\nclass DataTable extends Component {\n\n  deleteItem = id => {\n    let confirmDelete = window.confirm('Delete item forever?')\n    if(confirmDelete){\n      fetch('/api/v1/users/' + id, {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    })\n      .then(response => response.json())\n      .then(responseBody => {\n        if(responseBody.success){\n          this.props.deleteItemFromState(id)\n          Toastr.success(responseBody.message, 'Success')\n        } else {\n          // delete operation fail on backend\n          Toastr.error(responseBody.message, 'Error')\n        }\n      })\n      .catch(err => {\n        Toastr.error(\"Can't connect to server\", 'Error')\n      })\n    }\n\n  }\n\n  render() {\n\n    const items = this.props.items.map(item => {\n      return (\n        <tr key={item.id}>\n          <th scope=\"row\">{item.id}</th>\n          <td>{item.name}</td>\n          <td>{item.email}</td>\n          <td>{item.phone}</td>\n          <td>{Moment(item.dob).format(\"YYYY-MM-DD\")}</td>\n          <td>{item.gender === \"m\" ? \"Male\" : \"Female\"}</td>\n          <td>{item.address}</td>\n          <td>\n            <div style={{width:\"110px\"}}>\n              <ModalForm buttonLabel=\"Edit\" item={item} updateState={this.props.updateState}/>\n              {' '}\n              <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Del</Button>\n            </div>\n          </td>\n        </tr>\n      )\n    })\n\n    return (\n      <Table responsive hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Phone</th>\n            <th>Date Of Birth</th>\n            <th>Gender</th>\n            <th>Address</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items}\n        </tbody>\n      </Table>\n    )\n  }\n}\n\nexport default DataTable","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'reactstrap'\nimport ModalForm from './Components/Modals/Modal'\nimport DataTable from './Components/Tables/DataTable'\nimport { CSVLink } from \"react-csv\"\nimport Toastr from \"toastr\";\n\nclass App extends Component {\n  state = {\n    items: []\n  }\n\n  getItems(){\n    fetch('/api/v1/users')\n      .then(response => response.json())\n      .then(responseBody => {\n          if (responseBody.success) {\n            if(responseBody.data){\n              this.setState({items: responseBody.data})\n            }\n          } else {\n            // get operation fail on backend\n            Toastr.error(responseBody.message, 'Error')\n          }\n      })\n      .catch(err => {\n        Toastr.error(\"Can't connect to server\", 'Error')\n      })\n  }\n\n  addItemToState = (item) => {\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }))\n  }\n\n  updateState = (item) => {\n    const itemIndex = this.state.items.findIndex(data => data.id === item.id)\n    const newArray = [\n    // destructure all items from beginning to the indexed item\n      ...this.state.items.slice(0, itemIndex),\n    // add the updated item to the array\n      item,\n    // add the rest of the items to the array from the index after the replaced item\n      ...this.state.items.slice(itemIndex + 1)\n    ]\n    this.setState({ items: newArray })\n  }\n\n  deleteItemFromState = (id) => {\n    const updatedItems = this.state.items.filter(item => item.id !== id)\n    this.setState({ items: updatedItems })\n  }\n\n  componentDidMount(){\n    this.getItems()\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <h2 style={{margin: \"20px 0\"}}>CRUD REACTJS - GO REST API</h2>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <DataTable items={this.state.items} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <CSVLink\n              filename={\"db.csv\"}\n              color=\"primary\"\n              style={{float: \"left\", marginRight: \"10px\"}}\n              className=\"btn btn-primary\"\n              data={this.state.items}>\n              Download CSV\n            </CSVLink>\n            <ModalForm buttonLabel=\"Add Item\" addItemToState={this.addItemToState}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"toastr/build/toastr.css\";\nimport \"react-datetime/css/react-datetime.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}